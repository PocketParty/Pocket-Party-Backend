generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model addresses {
    address_id    Int         @id @default(autoincrement())
    enterprise_id Int
    estado        String      @db.VarChar(100)
    cidade        String      @db.VarChar(100)
    bairro        String      @db.VarChar(100)
    rua           String      @db.VarChar(100)
    numero        String      @db.VarChar(20)
    cep           String      @db.VarChar(20)
    complemento   String?     @db.VarChar(255)
    created_at    DateTime?   @default(now()) @db.Timestamptz(6)
    enterprises   enterprises @relation(fields: [enterprise_id], references: [enterprise_id], onDelete: Cascade, onUpdate: NoAction)
}

model contacts {
    contact_id    Int         @id @default(autoincrement())
    enterprise_id Int
    contact_type  String      @db.VarChar(50)
    contact_value String      @db.VarChar(255)
    created_at    DateTime?   @default(now()) @db.Timestamptz(6)
    enterprises   enterprises @relation(fields: [enterprise_id], references: [enterprise_id], onDelete: Cascade, onUpdate: NoAction)
}

model enterprises {
    enterprise_id    Int                @id @default(autoincrement())
    username         String             @unique @db.VarChar(50)
    password_hash    String             @db.VarChar(255)
    name             String             @db.VarChar(255)
    cnpj             String             @unique @db.VarChar(20)
    created_at       DateTime?          @default(now()) @db.Timestamptz(6)
    updated_at       DateTime?          @default(now()) @db.Timestamptz(6)
    addresses        addresses[]
    contacts         contacts[]
    enterprises_tags enterprises_tags[]
    products         products[]
    atuacao          String[]           @default([])
    descricao        String?
}

model enterprises_tags {
    enterprise_id Int
    tag_id        Int
    enterprises   enterprises @relation(fields: [enterprise_id], references: [enterprise_id], onDelete: Cascade, onUpdate: NoAction)
    tags          tags        @relation(fields: [tag_id], references: [tag_id], onDelete: Cascade, onUpdate: NoAction)

    @@id([enterprise_id, tag_id])
}

model product_tags {
    product_id Int
    tag_id     Int
    products   products @relation(fields: [product_id], references: [product_id], onDelete: Cascade, onUpdate: NoAction)
    tags       tags     @relation(fields: [tag_id], references: [tag_id], onDelete: Cascade, onUpdate: NoAction)

    @@id([product_id, tag_id])
}

model products {
    product_id    Int            @id @default(autoincrement())
    enterprise_id Int
    name          String         @db.VarChar(255)
    price         Decimal        @db.Decimal(10, 2)
    photo_url     String?
    description   String?
    created_at    DateTime?      @default(now()) @db.Timestamptz(6)
    updated_at    DateTime?      @default(now()) @db.Timestamptz(6)
    product_tags  product_tags[]
    enterprises   enterprises    @relation(fields: [enterprise_id], references: [enterprise_id], onDelete: Cascade, onUpdate: NoAction)
}

model tags {
    tag_id           Int                @id @default(autoincrement())
    tag_name         String             @unique @db.VarChar(50)
    enterprises_tags enterprises_tags[]
    product_tags     product_tags[]
}
